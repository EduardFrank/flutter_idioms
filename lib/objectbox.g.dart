// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/idiom.dart';
import 'models/idiom_of_the_day.dart';
import 'models/progress.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3789809205061507047),
    name: 'Idiom',
    lastPropertyId: const obx_int.IdUid(8, 1722169275497384267),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1773898938926111289),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6955563135234674207),
        name: 'idiom',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 412833375862152387),
        name: 'definition',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2193614465086245516),
        name: 'difficultyValue',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6183149099256085786),
        name: 'examplesJson',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3181950640816437535),
        name: 'translationsJson',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1722169275497384267),
        name: 'globalId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3533130332039032368),
    name: 'Progress',
    lastPropertyId: const obx_int.IdUid(4, 2878833680484694317),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 538300944434195608),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4385157452503097252),
        name: 'idiomId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 4121055704686731824),
        relationTarget: 'Idiom',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3202333551150076163),
        name: 'timesPracticed',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2878833680484694317),
        name: 'lastPracticed',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 2028463856188918006),
    name: 'IdiomOfTheDay',
    lastPropertyId: const obx_int.IdUid(3, 5211568287568647274),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6032712201148762251),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1785541115290960821),
        name: 'idiomId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5211568287568647274),
        name: 'date',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 2028463856188918006),
    lastIndexId: const obx_int.IdUid(1, 4121055704686731824),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [7728149458038448356],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Idiom: obx_int.EntityDefinition<Idiom>(
      model: _entities[0],
      toOneRelations: (Idiom object) => [],
      toManyRelations: (Idiom object) => {},
      getId: (Idiom object) => object.id,
      setId: (Idiom object, int id) {
        object.id = id;
      },
      objectToFB: (Idiom object, fb.Builder fbb) {
        final idiomOffset = fbb.writeString(object.idiom);
        final definitionOffset = fbb.writeString(object.definition);
        final examplesJsonOffset = fbb.writeString(object.examplesJson);
        final translationsJsonOffset = fbb.writeString(object.translationsJson);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, idiomOffset);
        fbb.addOffset(2, definitionOffset);
        fbb.addInt64(4, object.difficultyValue);
        fbb.addOffset(5, examplesJsonOffset);
        fbb.addOffset(6, translationsJsonOffset);
        fbb.addInt64(7, object.globalId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final globalIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final difficultyValueParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final idiomParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final definitionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final examplesJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final translationsJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final object = Idiom(
          id: idParam,
          globalId: globalIdParam,
          difficultyValue: difficultyValueParam,
          idiom: idiomParam,
          definition: definitionParam,
          examplesJson: examplesJsonParam,
          translationsJson: translationsJsonParam,
        );

        return object;
      },
    ),
    Progress: obx_int.EntityDefinition<Progress>(
      model: _entities[1],
      toOneRelations: (Progress object) => [object.idiom],
      toManyRelations: (Progress object) => {},
      getId: (Progress object) => object.id,
      setId: (Progress object, int id) {
        object.id = id;
      },
      objectToFB: (Progress object, fb.Builder fbb) {
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.idiom.targetId);
        fbb.addInt64(2, object.timesPracticed);
        fbb.addInt64(3, object.lastPracticed.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final timesPracticedParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final lastPracticedParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final object = Progress(
          id: idParam,
          timesPracticed: timesPracticedParam,
          lastPracticed: lastPracticedParam,
        );
        object.idiom.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.idiom.attach(store);
        return object;
      },
    ),
    IdiomOfTheDay: obx_int.EntityDefinition<IdiomOfTheDay>(
      model: _entities[2],
      toOneRelations: (IdiomOfTheDay object) => [],
      toManyRelations: (IdiomOfTheDay object) => {},
      getId: (IdiomOfTheDay object) => object.id,
      setId: (IdiomOfTheDay object, int id) {
        object.id = id;
      },
      objectToFB: (IdiomOfTheDay object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.idiomId);
        fbb.addInt64(2, object.date.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final idiomIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final object = IdiomOfTheDay(
          id: idParam,
          idiomId: idiomIdParam,
          date: dateParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Idiom] entity fields to define ObjectBox queries.
class Idiom_ {
  /// See [Idiom.id].
  static final id = obx.QueryIntegerProperty<Idiom>(_entities[0].properties[0]);

  /// See [Idiom.idiom].
  static final idiom = obx.QueryStringProperty<Idiom>(
    _entities[0].properties[1],
  );

  /// See [Idiom.definition].
  static final definition = obx.QueryStringProperty<Idiom>(
    _entities[0].properties[2],
  );

  /// See [Idiom.difficultyValue].
  static final difficultyValue = obx.QueryIntegerProperty<Idiom>(
    _entities[0].properties[3],
  );

  /// See [Idiom.examplesJson].
  static final examplesJson = obx.QueryStringProperty<Idiom>(
    _entities[0].properties[4],
  );

  /// See [Idiom.translationsJson].
  static final translationsJson = obx.QueryStringProperty<Idiom>(
    _entities[0].properties[5],
  );

  /// See [Idiom.globalId].
  static final globalId = obx.QueryIntegerProperty<Idiom>(
    _entities[0].properties[6],
  );
}

/// [Progress] entity fields to define ObjectBox queries.
class Progress_ {
  /// See [Progress.id].
  static final id = obx.QueryIntegerProperty<Progress>(
    _entities[1].properties[0],
  );

  /// See [Progress.idiom].
  static final idiom = obx.QueryRelationToOne<Progress, Idiom>(
    _entities[1].properties[1],
  );

  /// See [Progress.timesPracticed].
  static final timesPracticed = obx.QueryIntegerProperty<Progress>(
    _entities[1].properties[2],
  );

  /// See [Progress.lastPracticed].
  static final lastPracticed = obx.QueryDateProperty<Progress>(
    _entities[1].properties[3],
  );
}

/// [IdiomOfTheDay] entity fields to define ObjectBox queries.
class IdiomOfTheDay_ {
  /// See [IdiomOfTheDay.id].
  static final id = obx.QueryIntegerProperty<IdiomOfTheDay>(
    _entities[2].properties[0],
  );

  /// See [IdiomOfTheDay.idiomId].
  static final idiomId = obx.QueryIntegerProperty<IdiomOfTheDay>(
    _entities[2].properties[1],
  );

  /// See [IdiomOfTheDay.date].
  static final date = obx.QueryDateProperty<IdiomOfTheDay>(
    _entities[2].properties[2],
  );
}
